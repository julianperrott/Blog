<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Blog</title>
    <link>http://www.codesIn.net/post/</link>
    <description>Recent content in Posts on Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Wed, 05 Oct 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://www.codesIn.net/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>SimCity BuildIt Buying and Selling Bot</title>
      <link>http://www.codesin.net/post/SimCity-BuildIt-Bot-Part-2/</link>
      <pubDate>Wed, 05 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>http://www.codesin.net/post/SimCity-BuildIt-Bot-Part-2/</guid>
      <description>

&lt;p&gt;On my previous blog post I described how I had automated the crafting element of SimCity BuildIt. Next I tackle buying from &amp;ldquo;Global Trade&amp;rdquo; and Selling crafted items to generate in game currency.&lt;/p&gt;

&lt;p&gt;The main new problem I had to solve was recognising images from the game screen. This was solved using perceptual hashing with a dictionary of categorised image hashes.&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h3 id=&#34;1-buying-items&#34;&gt;1. Buying Items&lt;/h3&gt;

&lt;p&gt;Assuming we have a shopping list of items we need, then the goal is to buy those items.&lt;/p&gt;

&lt;p&gt;Clicking on the Global trade building brings up the trade window. The window contains a number of panels, each representing an item for sale. Dragging within the list from right to left reveals more items.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.codesIn.net/post/img/SB2_1_Global Trade.png&#34; alt=&#34;Global Trade HQ&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Usefully each panel is the same size, so If we can find where a panel starts, then the item will always be in the same place and all we need to do is to recognise the item in the panel. The way I solved this is described below:&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h4 id=&#34;finding-panels&#34;&gt;Finding Panels&lt;/h4&gt;

&lt;p&gt;The tops of the panels are always the same distance from the top of the screen.
Finding the tops of the panels required looking along this line for pixels close to the colour of the bounding line around the panels (See indicator red lines at the top of each panel below).&lt;/p&gt;

&lt;p&gt;Each continuous block of matching pixels is one panel. The first pixel in each line represents the top left of the panel.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.codesIn.net/post/img/SB2_2_Global Trade.png&#34; alt=&#34;Panels&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h4 id=&#34;recognising-the-item-in-the-panel&#34;&gt;Recognising the item in the panel&lt;/h4&gt;

&lt;p&gt;If we image capture a rectangle a fixed distance from the top left of the panel of a set size, we now have an image which can be processed and recognised using Image hashing.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.codesIn.net/post/img/SB2_3_Panel.png&#34; alt=&#34;Sale Item&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We recognise it using a library of pre-captured images. We create this library by storing unmatched images and then classify them by hand into named folders. Images which are almost the same (90%) can be automatically classified.&lt;/p&gt;

&lt;p&gt;As each image is processed  a hash is created e.g. 70088502915571468. The file is then renamed to the hash so that this never needs to be re-computed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.codesIn.net/post/img/SB2_4_Hashes.png&#34; alt=&#34;Image Hashes&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Once we&amp;rsquo;ve recognised an item that we want to buy, we then click on the panel and are transported to the trade depot of the city who is selling the item.&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h4 id=&#34;buying-the-item&#34;&gt;Buying the item&lt;/h4&gt;

&lt;p&gt;Once you are at the city selling the item, you usually find many other items for sale.&lt;/p&gt;

&lt;p&gt;The trade depot is similar to the global trade except that it has boxes instead of panels. We can use the same approach we used earlier to find the contents of the boxes and click on the desired item to buy it&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.codesIn.net/post/img/SB2_5_TradeDepot.png&#34; alt=&#34;Trade Depot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h3 id=&#34;2-selling-items&#34;&gt;2. Selling items&lt;/h3&gt;

&lt;p&gt;We have a trade depot where we can sell items. It contains a number of boxes each of which can contain a single item for sale. Once we click on an empty box a &amp;ldquo;Create Sale&amp;rdquo; dialog is shown.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.codesIn.net/post/img/SB2_7_HomeDepot.png&#34; alt=&#34;Trade Depot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;To sell an item, we need to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open up our trade depot.&lt;/li&gt;
&lt;li&gt;Collect any sold items.&lt;/li&gt;
&lt;li&gt;Pick an empty box, we may need to scroll horizontally to see more boxes.&lt;/li&gt;
&lt;li&gt;Click on the box to open the &amp;ldquo;Create Sale&amp;rdquo; dialog.&lt;/li&gt;
&lt;li&gt;Pick an item to sell and click on it.&lt;/li&gt;
&lt;li&gt;Press the quantity increase button until it turns grey.&lt;/li&gt;
&lt;li&gt;Press the price increase button until it turns grey.&lt;/li&gt;
&lt;li&gt;Click the &amp;lsquo;Put on sale&amp;rsquo; button.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Most of these steps simply require clicking at predetermined locations on the screen.&lt;/p&gt;

&lt;p&gt;Steps 2, 3 &amp;amp; 5 use the same image matching technique used when buying items.&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h3 id=&#34;3-what-is-perceptual-hashing&#34;&gt;3. What is Perceptual Hashing&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;A perceptual hash is a fingerprint of a multimedia file derived from various features from its content. Unlike cryptographic hash functions which rely on the avalanche effect of small changes in input leading to drastic changes in output,
perceptual hashes are &amp;ldquo;close&amp;rdquo; to one another if the features are similar.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The bot uses &lt;a href=&#34;https://github.com/jforshee/ImageHashing&#34;&gt;https://github.com/jforshee/ImageHashing&lt;/a&gt; which is an implementation of the algorithm found here: &lt;a href=&#34;http://www.hackerfactor.com/blog/index.php?/archives/432-Looks-Like-It.html&#34;&gt;http://www.hackerfactor.com/blog/index.php?/archives/432-Looks-Like-It.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A long number hash is created in the following steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Reduce the image to 8x8 pixels&lt;/li&gt;
&lt;li&gt;Reduce the color of each pixel from RGB (24 bits) to grayscale (6 bits).&lt;/li&gt;
&lt;li&gt;Compute the mean of all the 6-bit values&lt;/li&gt;
&lt;li&gt;Translate each pixel into a bit. 1 if the greyscale is &amp;gt;= to the mean.&lt;/li&gt;
&lt;li&gt;Turn the binary number into a long decimal.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The following shows the processes as it took place on 2 similar images. The images turned out to be only 73% similar.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.codesIn.net/post/img/SB2_6_Compared.png&#34; alt=&#34;Hashing Examples&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;bot-demo&#34;&gt;Bot Demo&lt;/h3&gt;

&lt;iframe allowfullscreen=&#34;&#34; frameborder=&#34;0&#34; height=&#34;270&#34; src=&#34;https://www.youtube.com/embed/JFwONo9b-RE&#34; width=&#34;480&#34;&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>SimCity BuildIt Crafting Bot</title>
      <link>http://www.codesin.net/post/SimCity-BuildIt-Bot/</link>
      <pubDate>Sun, 14 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>http://www.codesin.net/post/SimCity-BuildIt-Bot/</guid>
      <description>

&lt;p&gt;When a task is repetitive, why would we want to do it ourselves, if someone or something else could do it equally well or better? Computers are really good at doing repetitive tasks because they are accurate, don’t get bored, complain or need to be paid. Tasks which run within a system are the easiest and cheapest to automate, others can be cost effective if there is enough benefit. For example robots on a factory production line, automated driving or flying an aircraft.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;simcity-buildit&#34;&gt;SimCity BuildIt&lt;/h3&gt;

&lt;p&gt;Certain computer games are a time sink, requiring constant attention to make progress and maintain attention.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.codesIn.net/post/img/simcity_screenshot.jpg&#34; alt=&#34;alt text&#34; title=&#34;Sim City BuildIt Screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;SimCity BuildIt (a mobile game which runs on the Android or IOS platform) is one such game and has 2 obvious repetitive areas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Crafting: It requires you to manufacture raw materials and then use them to create other items which are more valuable. These items have an in-game value and can be sold or used to complete tasks.&lt;/li&gt;
&lt;li&gt;Global Trade: Buying non craft able and time expensive craft-able items. Selling items I have crafted.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Because I want to do the fun things in the game without suffering the pain, I wrote a bot in C# to do the crafting.&lt;/p&gt;

&lt;p&gt;Rather than writing the code native on the platform I use an android emulator (Memu) running on my PC and I send commands to it from my C# code to automate the play.&lt;/p&gt;

&lt;p&gt;The basic iterations between the bot and the game are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Touch and Swipe on the screen.&lt;/li&gt;
&lt;li&gt;Read text from the display.&lt;/li&gt;
&lt;li&gt;Read the colour of text on the display.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;bot-demo&#34;&gt;Bot Demo&lt;/h3&gt;

&lt;iframe allowfullscreen=&#34;&#34; frameborder=&#34;0&#34; height=&#34;270&#34; src=&#34;https://www.youtube.com/embed/OOk6HWBdy6U&#34; width=&#34;480&#34;&gt;&lt;/iframe&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;bot-detail&#34;&gt;Bot Detail&lt;/h3&gt;

&lt;p&gt;To build a crafting bot I needed to be able to do the following:&lt;/p&gt;

&lt;h4 id=&#34;select-a-building&#34;&gt;Select a building&lt;/h4&gt;

&lt;p&gt;This can be done by touching the centre of the screen using ADB (Android Debug Bridge), a building must be located at the centre of the screen when the bot is started. It helps to turn on the developer options for &amp;lsquo;pointer location&amp;rsquo; and &amp;lsquo;showing touches&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.codesIn.net/post/img/simcity_options.jpg&#34; alt=&#34;alt text&#34; title=&#34;Developer Options&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;know-which-building-i-am-in&#34;&gt;Know which building I am in&lt;/h4&gt;

&lt;p&gt;The name of the building is shown at the top of the screen, this is read using OCR (Optical Character Recognition) using Tesseract Open Source OCR Engine. A screen shot of part of the MEMU application is taken and OCR&amp;rsquo;d.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.codesIn.net/post/img/simcity_title.jpg&#34; alt=&#34;alt text&#34; title=&#34;Building Title&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;navigate-to-another-building&#34;&gt;Navigate to another building&lt;/h4&gt;

&lt;p&gt;There are buttons on the side of the building name which will cycle around the factories or commercial buildings.&lt;/p&gt;

&lt;h4 id=&#34;move-between-a-factory-and-a-commercial-building&#34;&gt;Move between a factory and a Commercial building&lt;/h4&gt;

&lt;p&gt;This is done by positioning selected buildings (one commercial and one factory) in a known configuration and then clicking above or below to switch. For example the Hardware store has a Mass Production factory above it and both of these are unique buildings, so when we are at either in the building cycle we can move to the other.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.codesIn.net/post/img/simcity_hardware_store.jpg&#34; alt=&#34;alt text&#34; title=&#34;Building Positions&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;build-an-item-in-either-a-factory-or-commercial-building&#34;&gt;Build an Item in either a factory or commercial building&lt;/h4&gt;

&lt;p&gt;The craft-able items are laid out on buttons in specific places. So we can swipe from the button to the crafting location to build the item. Determining if we need to craft raw materials for craft-able items is found out by clicking on the item&amp;rsquo;s button and looking to see the colour of the required materials. Red means we don&amp;rsquo;t have enough.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.codesIn.net/post/img/simcity_raw_materials.jpg&#34; alt=&#34;alt text&#34; title=&#34;Building Title&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;collect-an-item&#34;&gt;Collect an item&lt;/h4&gt;

&lt;p&gt;Collecting a crafted item requires touching the building.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;the-things-i-learn-t-writing-the-bot&#34;&gt;The things I learn&amp;rsquo;t writing the bot:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;You can&amp;rsquo;t use User32.dll methods to click on the Memu application, you need to use ADB.&lt;/li&gt;
&lt;li&gt;ADB Input commands for tap and swipe don&amp;rsquo;t work reliably. Instead I used ADB &amp;lsquo;sendevent&amp;rsquo; to send a series of commands codes to do each tap and swipe.&lt;/li&gt;
&lt;li&gt;A seeming complex workflow can be simplified into a working automated process with surprisingly few building blocks.&lt;/li&gt;
&lt;li&gt;I need to extend the bot to sell the items on the global trade as this is a pain after the bot has been running for a few hours.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Cross Platform Apps For Microsoft Developers</title>
      <link>http://www.codesin.net/post/Cross-Platform-Apps/</link>
      <pubDate>Sun, 19 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://www.codesin.net/post/Cross-Platform-Apps/</guid>
      <description>&lt;p&gt;There is a demand which didn’t exist five years ago for business applications which run on tablets and phones.&lt;/p&gt;

&lt;p&gt;If you are a developer in a Microsoft shop you would probably first consider developing your app for windows tablets / phones. But you need to consider what devices your customer has and will have over the next few years. Android and IOS fill 89% of the market so developing only for a windows device would limit the app to a tiny percentage of the market. You could pick one of the big two, but this would require learning a new language (Objective-C / Swift or Java) and understanding the design principles of that platform (Material / Flat).&lt;/p&gt;

&lt;p&gt;There seems to be two viable options for developers in the Microsoft stack:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using C# and XAML with Xamarin Forms.&lt;/li&gt;
&lt;li&gt;Javascript and HTML5 which has many choices (Phonegap, Sencha, Appcelerator, iFactr etc).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Write once run anywhere seems like an ideal solution, but there may be compromises. The decision needs to consider the following areas:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Accessibility:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The skillsets your developers already have (XAML or HTML).&lt;/li&gt;
&lt;li&gt;The ease and speed of development in each environment. What tools are available ?&lt;/li&gt;
&lt;li&gt;Resources for learning. e.g. Videos and the information supplied by the suppliers (wiki, web site).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Popularity:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The community and third party activity behind each option.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Activity:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How active the code owners are (releasing new features, bug fixing).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Users:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Each platform has its own design principles which create a standard experience for the users, a common approach may not be able to supply this native experience. If this matters less to your users than the functionality then this shouldn’t be a problem. Users of business apps probably already experience a multitude of design experiences: ‘Winforms’, ‘Web applications’, ‘WPF/Silverlight’ etc.&lt;/li&gt;
&lt;li&gt;Performance issues may prevent a non native approach. If the app requires a high frame-rate or has intense graphical requirements such as 3D then performance may be an issue.&lt;/li&gt;
&lt;li&gt;What devices are they using. Do they have a mixture running different operating systems or do you only need to support one.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If there is no clear choice then you could clarify the decision by doing a few sprints developing each solution, then see which the developers and users prefer.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Productivity from &#39;The Flow&#39;</title>
      <link>http://www.codesin.net/post/Productivity-from-the-Flow/</link>
      <pubDate>Sat, 18 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://www.codesin.net/post/Productivity-from-the-Flow/</guid>
      <description>&lt;p&gt;Have you ever started a task and before you knew it hours had passed ?&lt;/p&gt;

&lt;p&gt;You were so focused on achieving that task that the rest of the world ceased to exist. This is known as the flow / being in the zone. The flow is good for productivity and I’m going to show you how to get into it and stay there.&lt;/p&gt;

&lt;p&gt;First you need a task with a clear goal where you have everything you need to achieve progress towards completing that goal. The goal must have some value to you.&lt;/p&gt;

&lt;p&gt;Next turn off anything that will distract you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Email&lt;/li&gt;
&lt;li&gt;Instant Messenger&lt;/li&gt;
&lt;li&gt;Your Phone&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If like most of us you are cursed with working in an open plan office, then people will be the ones who will be the problem. If you can’t avoid them, if not:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Go somewhere quiet, a meeting room or empty office, or even work from home.&lt;/li&gt;
&lt;li&gt;If you normally get a lot of interruptions then put up a do not disturb flag. People will soon learn when you want some quiet time, and will interrupt you anyway if it is urgent.&lt;/li&gt;
&lt;li&gt;Put on some headphones. White noise will drown out the distrations of the general office noise, or if white noise doesn’t appeal then try “Music to Code By” &lt;a href=&#34;http://mtcb.pwop.com/&#34;&gt;http://mtcb.pwop.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that the distractions have been avoided, we need to make sure that your mind is kept engaged in the task and demands its attention.&lt;/p&gt;

&lt;p&gt;Make sure your hardware is up to scratch. Waiting for your PC to catch up with your mind, will make your mind wander off the task. A second monitor or one with a higher resolution helps to keep everything you need close at hand. Let’s face it hardware is cheap compared to your salary, if you saved 10 minutes a day then most of the cost would be repaid in a year.&lt;/p&gt;

&lt;p&gt;So, now its time to start. If you find yourself procrastinating then try simply preparing to do the task without planning to actually do it. You may find you are so engaged with preparing that you start the task. The Pomodoro technique can also help to break the inertia.&lt;/p&gt;

&lt;p&gt;Once you have experienced the flow, you should feel energised and have been effortlessly productive.&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;I&amp;rsquo;m going to give you a little advice. There&amp;rsquo;s a force in the universe that makes things happen. And all you have to do is get in touch with it, stop thinking, let things happen, and be the ball.” Ty Webb “Caddyshack”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;“Empty your mind, be formless, shapeless - like water. Now you put water into a cup, it becomes the cup, you put water into a bottle, it becomes the bottle, you put it in a teapot, it becomes the teapot. Now water can flow or it can crash. Be water, my friend.” Bruce Lee&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Ingress Intel Total Conversion - JavaScript Plugin</title>
      <link>http://www.codesin.net/post/Ingress-Intel-Total-Conversion-JavaScript-Plugin/</link>
      <pubDate>Mon, 20 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://www.codesin.net/post/Ingress-Intel-Total-Conversion-JavaScript-Plugin/</guid>
      <description>&lt;p&gt;
    &lt;a href=&#34;https://www.ingress.com/&#34;&gt;Ingress&lt;/a&gt;
    is a game where real world locations are defined as portals. These portals can be linked to other portals. When 3 portals are linked in a triangle a &#34;field&#34; is created. These fields score &#34;points&#34; for your team.
&lt;/p&gt; &lt;p&gt;
    &lt;a href=&#34;http://iitc.jonatkins.com/&#34;&gt;Ingress Intel Total Conversion&lt;/a&gt; is a browser add-on that modifies the standard ingress Intel map, offering more features. One feature it allows is new functionality in the form of JavaScript plug-ins.
    &lt;br&gt;
&lt;/p&gt;
&lt;h3&gt;The Objective&lt;/h3&gt; &lt;p&gt;
    I thought it might be useful to see on the map, fields which have already 2 of their sides completed, and to indicate the link which would complete them.
&lt;/p&gt; &lt;p&gt;
    For example: in the image below we can see existing fields, we can also see that linking portal 1 to 3 would create a field. Sometimes these fields links are less obvious.
&lt;/p&gt; &lt;p&gt;
    One of the rules of linking portals is that a new link may not cross an existing link. So portal 4 could not be linked to 3 because it would cross the 1 to 2 link.
&lt;/p&gt; &lt;p&gt;
    &lt;a href=&#34;http://www.codesIn.net/post/img/Test1.png&#34; target=&#34;_blank&#34;&gt;
        &lt;img title=&#34;Test1&#34; style=&#34;border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px&#34; border=&#34;0&#34; alt=&#34;Test1&#34; src=&#34;http://www.codesIn.net/post/img/Test1.png&#34; width=&#34;869&#34; height=&#34;425&#34;&gt;
    &lt;/a&gt;
&lt;/p&gt;
&lt;h3&gt;The Algorithm&lt;/h3&gt; &lt;p&gt;To determine these &#34;field finishing&#34; links:&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;Make a list of all existing links between portals.
    &lt;li&gt;For each portal owned by your team move across all of its existing links(if it has any) to the next portal (e.g. 1 to 2), repeat from that portal to the next (e.g. 2 to 3)
    &lt;li&gt;
        For all of the paths found check if the link back to the first portal (e.g. 3 to 1) can be made without crossing any link in the list of portal links made earlier.
    &lt;/li&gt;
&lt;/ul&gt; &lt;p&gt;
    The complicated bit is determining if two line segments cross, thankfully Martin Thoma has a great site with some JavaScript code which I have included in the algorithm.
&lt;/p&gt; &lt;p&gt;
    &lt;a title=&#34;http://martin-thoma.com/how-to-check-if-two-line-segments-intersect/&#34; href=&#34;http://martin-thoma.com/how-to-check-if-two-line-segments-intersect/&#34;&gt;
        http://martin-thoma.com/how-to-check-if-two-line-segments-intersect/
    &lt;/a&gt;
&lt;/p&gt;
&lt;h3&gt;The Plug-in&lt;/h3&gt; &lt;p&gt;
    Once the required links have been determined they need to be represented on the map. This done by drawing on a new map layer called &#39;Field Finisher&#39;, the links are indicated using red dotted lines.
&lt;/p&gt; &lt;p&gt;
    &lt;a href=&#34;http://www.codesIn.net/post/img/Plugin.png&#34; target=&#34;_blank&#34;&gt;
        &lt;img title=&#34;Plugin&#34; style=&#34;border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px&#34; border=&#34;0&#34; alt=&#34;Plugin&#34; src=&#34;http://www.codesIn.net/post/img/Plugin.png&#34; width=&#34;887&#34; height=&#34;430&#34;&gt;
    &lt;/a&gt;
&lt;/p&gt; &lt;p&gt; &lt;p&gt;
    The algorithm has been unit tested using &lt;a href=&#34;http://jasmine.github.io/&#34;&gt;Jasmine&lt;/a&gt;
&lt;/p&gt; &lt;p&gt;
    The plug-in code can be download here
    &lt;a href=&#34;http://www.codesIn.net/post/content/ingress/field-finisher.user.js&#34;&gt;
        field-finisher.user.js
    &lt;/a&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Single responsibility principle - Redefined</title>
      <link>http://www.codesin.net/post/Single-responsibility-principle-Redefined/</link>
      <pubDate>Mon, 20 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://www.codesin.net/post/Single-responsibility-principle-Redefined/</guid>
      <description>&lt;p&gt;
    Single responsibility principle by Uncle Bob (Robert C. Martin) is the first of the SOLID object orientated design principles. I read it a few years ago, but felt my understanding of it was a little unclear, and I am not alone. This led me to try to understand it again and during which I&#39;ve discovered that Uncle Bob has redefined it.
&lt;/p&gt; &lt;p&gt;
    &lt;a href=&#34;http://www.codesIn.net/post/img/UncleBob.jpg&#34;&gt;
        &lt;img title=&#34;UncleBob&#34; style=&#34;border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px&#34; border=&#34;0&#34; alt=&#34;UncleBob&#34; src=&#34;http://www.codesIn.net/post/img/UncleBob.jpg&#34; width=&#34;244&#34; height=&#34;186&#34;&gt;
    &lt;/a&gt;&lt;br&gt;&amp;nbsp;&lt;br&gt;
&lt;/p&gt;
&lt;H3&gt;The old SRP&lt;/H3&gt; &lt;p&gt;
    &#34;A CLASS SHOULD HAVE ONLY ONE REASON TO CHANGE.&#34;&lt;br&gt;&amp;nbsp;
    &lt;br&gt;Bob explains that a responsibility is defined as &#34;a reason for change&#34;. If a class has more that one responsibility then those responsibilities become coupled and changes to one may impair the ability to meet the others. This coupling makes the design fragile, with changes causing unexpected impacts in the system.
    &lt;br&gt;&amp;nbsp;&lt;br&gt;&#34;If you can think of more than one motive for changing a class, then that class has more than one responsibility.&#34;&lt;br&gt;&amp;nbsp;
    &lt;br&gt;When I read this chapter It feels like the focus is the functionality of a class. That it should not have differing sets of functionality, which seems to be no different than cohesiveness.
&lt;/p&gt;
&lt;p&gt;
    If you are already aware that concerns such as presentation, persistence and business logic should be separated, then most of the examples people use to describe SRP become redundant. What you have left with is the decision whether breaking up a class is worth the additional complexity.
    &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;https://docs.google.com/file/d/0ByOwmqah_nuGNHEtcU5OekdDMkk/edit&#34;&gt;The Single Responsibility - Chapter&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Single_responsibility_principle&#34;&gt;wikipedia.org&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
&lt;/p&gt;
&lt;H3&gt;The new SRP&lt;/H3&gt;
&lt;p&gt;
    Bob says that &#34;Things that change for the same reason should be grouped together. Things that change for different reasons should be separated.&#34;, this is not new, but he also says:
&lt;/p&gt; &lt;p&gt;&#34;A responsibility is a person, not something the code does. It is a person who wants to make a change to the code.&#34;&lt;/p&gt;
&lt;p&gt;So we now should think about who would require changes to our classes. He clarifies that a person can have more than one role and the role is who the code is responsible to.&lt;/p&gt;
&lt;p&gt;&#34;If two different people want to change a class for two different reasons, then pull those reasons into two different classes. That is the SRP.&#34; &lt;/p&gt;
&lt;p&gt;
    &#34;Violation of SRP means that a change by one role could affect the code for another role.&#34;
    &lt;ul&gt;
        &lt;li&gt;
            &lt;a href=&#34;http://blog.8thlight.com/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html&#34;&gt;Uncle Bob&#39;s blog&lt;/a&gt;
        &lt;/li&gt;
        &lt;li&gt;
            &lt;a href=&#34;http://vimeo.com/43592685&#34;&gt;NDC 2012 - Video&lt;/a&gt;
        &lt;/li&gt;
    &lt;/ul&gt;
&lt;/p&gt;
&lt;H3&gt;Conclusions&lt;/H3&gt; &lt;p&gt;Changing the focus away from the functionality of the code to the person/role who want to change it makes the principle a lot clearer for me.&lt;/p&gt;
&lt;p&gt;Wikipedia is out of date.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Chaining promises with AngularJs and JQuery</title>
      <link>http://www.codesin.net/post/Chaining-promises-with-AngularJs-and-JQuery/</link>
      <pubDate>Tue, 08 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://www.codesin.net/post/Chaining-promises-with-AngularJs-and-JQuery/</guid>
      <description>&lt;p&gt;Promises allow for consistent handling of the results of a task (Usually asynchronous). A promise is returned from a function call with a deferred result. &lt;br&gt;The promise result is either success (promise.resolve) or failure (promise.reject).&lt;/p&gt; &lt;p&gt;The basic usage pattern looks like this: &lt;/p&gt; &lt;p&gt;&lt;!-- HTML generated using hilite.me --&gt;&lt;/p&gt; &lt;div style=&#34;overflow: auto; border-top: gray 0.1em solid; border-right: gray 0.1em solid; width: auto; background: #ffffff; border-bottom: gray 0.1em solid; padding-bottom: 0.2em; padding-top: 0.2em; padding-left: 0.6em; border-left: gray 0.8em solid; padding-right: 0.6em&#34;&gt;
    &lt;table&gt;
        &lt;tbody&gt;
            &lt;tr&gt;
                &lt;td&gt;
                    &lt;pre style=&#34;margin: 0px; line-height: 125%&#34;&gt;1
2&lt;/pre&gt;
                &lt;/td&gt;
                &lt;td&gt;
                    &lt;pre style=&#34;margin: 0px; line-height: 125%&#34;&gt;doStuff() &lt;span style=&#34;color: #008000&#34;&gt;// returns a promise&lt;/span&gt;
   .then(&lt;span style=&#34;color: #0000ff&#34;&gt;function&lt;/span&gt;(data) { &lt;span style=&#34;color: #008000&#34;&gt;/* handle success */&lt;/span&gt;  }, &lt;span style=&#34;color: #0000ff&#34;&gt;function&lt;/span&gt;(data) { &lt;span style=&#34;color: #008000&#34;&gt;/* handle rejection */&lt;/span&gt; }); 
&lt;/pre&gt;
                &lt;/td&gt;
            &lt;/tr&gt;
        &lt;/tbody&gt;
    &lt;/table&gt;
&lt;/div&gt;&lt;br&gt;
If you must have more than one step then promises can be chained. Each step in the chain should return another promise. If any of the steps get rejected then the next steps are skipped and the next rejection handler is called.
&lt;br&gt;&amp;nbsp;&lt;br&gt;
&lt;!-- HTML generated using hilite.me --&gt;
&lt;div style=&#34;overflow: auto; border-top: gray 0.1em solid; border-right: gray 0.1em solid; width: auto; background: #ffffff; border-bottom: gray 0.1em solid; padding-bottom: 0.2em; padding-top: 0.2em; padding-left: 0.6em; border-left: gray 0.8em solid; padding-right: 0.6em&#34;&gt;
    &lt;table&gt;
        &lt;tbody&gt;
            &lt;tr&gt;
                &lt;td&gt;
                    &lt;pre style=&#34;margin: 0px; line-height: 125%&#34;&gt;1
2
3
4&lt;/pre&gt;
                &lt;/td&gt;
                &lt;td&gt;
                    &lt;pre style=&#34;margin: 0px; line-height: 125%&#34;&gt;doStuff1() &lt;span style=&#34;color: #008000&#34;&gt;// should return a promise&lt;/span&gt;
    .then(&lt;span style=&#34;color: #0000ff&#34;&gt;function&lt;/span&gt; (data) { &lt;span style=&#34;color: #0000ff&#34;&gt;return&lt;/span&gt; doStuff2(); &lt;span style=&#34;color: #008000&#34;&gt;/* should return a promise */&lt;/span&gt; })
    .then(&lt;span style=&#34;color: #0000ff&#34;&gt;function&lt;/span&gt; (data) { &lt;span style=&#34;color: #0000ff&#34;&gt;return&lt;/span&gt; doStuff3(); &lt;span style=&#34;color: #008000&#34;&gt;/* should return a promise */&lt;/span&gt; })
    .then(&lt;span style=&#34;color: #0000ff&#34;&gt;function&lt;/span&gt; (data) { &lt;span style=&#34;color: #008000&#34;&gt;/* all were resolved */&lt;/span&gt; }, &lt;span style=&#34;color: #0000ff&#34;&gt;function&lt;/span&gt; (data) { &lt;span style=&#34;color: #008000&#34;&gt;/* handle rejection from any of the above*/&lt;/span&gt; }); 
&lt;/pre&gt;
                &lt;/td&gt;
            &lt;/tr&gt;
        &lt;/tbody&gt;
    &lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;font size=&#34;4&#34;&gt;&lt;/font&gt;&lt;/strong&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;font size=&#34;4&#34;&gt;AngularJs&lt;/font&gt;&lt;/strong&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;br&gt;Use &#39;catch&#39; to make it more obvious when the failure handling is.&lt;br&gt;&#39;finally&#39; indicates a step which always runs.&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;br&gt;&lt;/p&gt;&lt;!-- HTML generated using hilite.me --&gt;
&lt;div style=&#34;overflow: auto; border-top: gray 0.1em solid; border-right: gray 0.1em solid; width: auto; background: #ffffff; border-bottom: gray 0.1em solid; padding-bottom: 0.2em; padding-top: 0.2em; padding-left: 0.6em; border-left: gray 0.8em solid; padding-right: 0.6em&#34;&gt;
    &lt;table&gt;
        &lt;tbody&gt;
            &lt;tr&gt;
                &lt;td&gt;
                    &lt;pre style=&#34;margin: 0px; line-height: 125%&#34;&gt;1
2
3
4
5
6&lt;/pre&gt;
                &lt;/td&gt;
                &lt;td&gt;
                    &lt;pre style=&#34;margin: 0px; line-height: 125%&#34;&gt;doStuff1() &lt;span style=&#34;color: #008000&#34;&gt;// must return a promise&lt;/span&gt;
    .then(&lt;span style=&#34;color: #0000ff&#34;&gt;function&lt;/span&gt; (data) { &lt;span style=&#34;color: #0000ff&#34;&gt;return&lt;/span&gt; doStuff2(); })
    .then(&lt;span style=&#34;color: #0000ff&#34;&gt;function&lt;/span&gt; (data) { &lt;span style=&#34;color: #0000ff&#34;&gt;return&lt;/span&gt; doStuff3(); })
    .then(&lt;span style=&#34;color: #0000ff&#34;&gt;function&lt;/span&gt; (data) { &lt;span style=&#34;color: #008000&#34;&gt;/* all steps were resolved */&lt;/span&gt; });
    .&lt;span style=&#34;color: #0000ff&#34;&gt;catch&lt;/span&gt;(&lt;span style=&#34;color: #0000ff&#34;&gt;function&lt;/span&gt; () { &lt;span style=&#34;color: #008000&#34;&gt;/* at least one step was rejected */&lt;/span&gt; })
    .&lt;span style=&#34;color: #0000ff&#34;&gt;finally&lt;/span&gt;(&lt;span style=&#34;color: #0000ff&#34;&gt;function&lt;/span&gt; () { &lt;span style=&#34;color: #008000&#34;&gt;/* I always run */&lt;/span&gt; })
&lt;/pre&gt;
                &lt;/td&gt;
            &lt;/tr&gt;
        &lt;/tbody&gt;
    &lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br&gt;&lt;strong&gt;&lt;font size=&#34;4&#34;&gt;JQuery&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use &#39;done&#39; to execute code when no rejections occur.&lt;br&gt;Use &#39;fail&#39; to make it obvious when the failure handling is.&lt;br&gt;&#39;always&#39; indicates a step which always runs.&lt;/p&gt;
&lt;p&gt;&lt;!-- HTML generated using hilite.me --&gt;&lt;/p&gt;
&lt;div style=&#34;overflow: auto; border-top: gray 0.1em solid; border-right: gray 0.1em solid; width: auto; background: #ffffff; border-bottom: gray 0.1em solid; padding-bottom: 0.2em; padding-top: 0.2em; padding-left: 0.6em; border-left: gray 0.8em solid; padding-right: 0.6em&#34;&gt;
    &lt;table&gt;
        &lt;tbody&gt;
            &lt;tr&gt;
                &lt;td&gt;
                    &lt;pre style=&#34;margin: 0px; line-height: 125%&#34;&gt;1
2
3
4
5
6&lt;/pre&gt;
                &lt;/td&gt;
                &lt;td&gt;
                    &lt;pre style=&#34;margin: 0px; line-height: 125%&#34;&gt;doStuff1()
    .then(&lt;span style=&#34;color: #0000ff&#34;&gt;function&lt;/span&gt; () { &lt;span style=&#34;color: #0000ff&#34;&gt;return&lt;/span&gt; doStuff2(); })
    .then(&lt;span style=&#34;color: #0000ff&#34;&gt;function&lt;/span&gt; () { &lt;span style=&#34;color: #0000ff&#34;&gt;return&lt;/span&gt; doStuff3(); })
    .done(&lt;span style=&#34;color: #0000ff&#34;&gt;function&lt;/span&gt; () { alert(&lt;span style=&#34;color: #a31515&#34;&gt;&#39;all worked&#39;&lt;/span&gt;); })
    .fail(&lt;span style=&#34;color: #0000ff&#34;&gt;function&lt;/span&gt; () { alert(&lt;span style=&#34;color: #a31515&#34;&gt;&#39;at least one failed&#39;&lt;/span&gt;); })
    .always(&lt;span style=&#34;color: #0000ff&#34;&gt;function&lt;/span&gt; () { alert(&lt;span style=&#34;color: #a31515&#34;&gt;&#39;I always run&#39;&lt;/span&gt;); });
&lt;/pre&gt;
                &lt;/td&gt;
            &lt;/tr&gt;
        &lt;/tbody&gt;
    &lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;br&gt;&lt;strong&gt;&lt;font size=&#34;4&#34;&gt;Avoiding easy mistakes:&lt;/font&gt;&lt;/strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;br&gt;&lt;strong&gt;1. Forgetting to include the return keyword.&lt;/strong&gt; &lt;!-- HTML generated using hilite.me --&gt;&lt;/p&gt;
&lt;div style=&#34;overflow: auto; border-top: gray 0.1em solid; border-right: gray 0.1em solid; width: auto; background: #ffffff; border-bottom: gray 0.1em solid; padding-bottom: 0.2em; padding-top: 0.2em; padding-left: 0.6em; border-left: gray 0.8em solid; padding-right: 0.6em&#34;&gt;
    &lt;table&gt;
        &lt;tbody&gt;
            &lt;tr&gt;
                &lt;td&gt;
                    &lt;pre style=&#34;margin: 0px; line-height: 125%&#34;&gt;1
2
3
4&lt;/pre&gt;
                &lt;/td&gt;
                &lt;td&gt;
                    &lt;pre style=&#34;margin: 0px; line-height: 125%&#34;&gt;doStuff1() &lt;span style=&#34;color: #008000&#34;&gt;// must return a promise&lt;/span&gt;
    .then(&lt;span style=&#34;color: #0000ff&#34;&gt;function&lt;/span&gt; (data) { doStuff2(); &lt;span style=&#34;color: #008000&#34;&gt;/* must return a promise */&lt;/span&gt; })
    .then(&lt;span style=&#34;color: #0000ff&#34;&gt;function&lt;/span&gt; (data) { doStuff3(); &lt;span style=&#34;color: #008000&#34;&gt;/* must return a promise */&lt;/span&gt; })
    .then(&lt;span style=&#34;color: #0000ff&#34;&gt;function&lt;/span&gt; (data) { &lt;span style=&#34;color: #008000&#34;&gt;/* all were resolved */&lt;/span&gt; }, &lt;span style=&#34;color: #0000ff&#34;&gt;function&lt;/span&gt; (data) { &lt;span style=&#34;color: #008000&#34;&gt;/* handle rejection from any of the above*/&lt;/span&gt; });
&lt;/pre&gt;
                &lt;/td&gt;
            &lt;/tr&gt;
        &lt;/tbody&gt;
    &lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;In this case when doStuff1() is resolved doStuff2() will be called. &lt;br&gt;Because it does not return a promise then doStuff3() will be called irrespective to the result of doStuff2() &lt;br&gt;unless it throws an exception.&lt;/p&gt;
&lt;p&gt;i.e. A step must return a promise or throw an exception otherwise the next &#39;resolved&#39; step will be called.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. In AngularJs handling failure on every chained step rather than once at the end.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;!-- HTML generated using hilite.me --&gt;&lt;/p&gt;
&lt;div style=&#34;overflow: auto; border-top: gray 0.1em solid; border-right: gray 0.1em solid; width: auto; background: #ffffff; border-bottom: gray 0.1em solid; padding-bottom: 0.2em; padding-top: 0.2em; padding-left: 0.6em; border-left: gray 0.8em solid; padding-right: 0.6em&#34;&gt;
    &lt;table&gt;
        &lt;tbody&gt;
            &lt;tr&gt;
                &lt;td&gt;
                    &lt;pre style=&#34;margin: 0px; line-height: 125%&#34;&gt;1
2
3
4&lt;/pre&gt;
                &lt;/td&gt;
                &lt;td&gt;
                    &lt;pre style=&#34;margin: 0px; line-height: 125%&#34;&gt;doStuff1() &lt;span style=&#34;color: #008000&#34;&gt;// must return a promise&lt;/span&gt;
    .then(&lt;span style=&#34;color: #0000ff&#34;&gt;function&lt;/span&gt; (data) { &lt;span style=&#34;color: #0000ff&#34;&gt;return&lt;/span&gt; doStuff2(); }, &lt;span style=&#34;color: #0000ff&#34;&gt;function&lt;/span&gt;(data) { alert(&lt;span style=&#34;color: #a31515&#34;&gt;&#39;step 1 was rejected&#39;&lt;/span&gt;); })
    .then(&lt;span style=&#34;color: #0000ff&#34;&gt;function&lt;/span&gt; (data) { &lt;span style=&#34;color: #0000ff&#34;&gt;return&lt;/span&gt; doStuff3(); }, &lt;span style=&#34;color: #0000ff&#34;&gt;function&lt;/span&gt; (data) { alert(&lt;span style=&#34;color: #a31515&#34;&gt;&#39;step 2 was rejected&#39;&lt;/span&gt;); })
    .then(&lt;span style=&#34;color: #0000ff&#34;&gt;function&lt;/span&gt; (data) { &lt;span style=&#34;color: #008000&#34;&gt;/* handle resolved from dostuff3 */&lt;/span&gt; }, &lt;span style=&#34;color: #0000ff&#34;&gt;function&lt;/span&gt; (data) { alert(&lt;span style=&#34;color: #a31515&#34;&gt;&#39;step 3 was rejected&#39;&lt;/span&gt;); });
&lt;/pre&gt;
                &lt;/td&gt;
            &lt;/tr&gt;
        &lt;/tbody&gt;
    &lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;br&gt;If a step should only execute if the previous step was resolved then rejection should be handled after the last step.
&lt;br&gt;The problem with handling it in each &#39;then&#39; is that if the rejection function does not either return a promise which is rejected or throw an exception then the next chained resolved step will be executed. &lt;/p&gt;
&lt;p&gt;e.g. if doStuff1() is rejected then &#39;alert(&#39;step 1 was rejected&#39;);&#39; will be executed. Because this does not return a promise the next &#39;then&#39; statement resolved step will run and &#39;doStuff3()&#39; will be called.
&lt;br&gt;&amp;nbsp;&lt;br&gt;Note: this is different to the way JQuery works. It will pass the rejected promise to the next &#39;.then&#39; causing each rejection handler to be called.&lt;/p&gt;
&lt;p&gt;JQuery Chained Promise Example: &lt;a title=&#34;http://jsfiddle.net/2DQwx/&#34; href=&#34;http://jsfiddle.net/2DQwx/&#34;&gt;http://jsfiddle.net/2DQwx/&lt;/a&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Giving feedback during a long running task</title>
      <link>http://www.codesin.net/post/Giving-feedback-during-a-long-running-task/</link>
      <pubDate>Mon, 16 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://www.codesin.net/post/Giving-feedback-during-a-long-running-task/</guid>
      <description>&lt;p&gt;Some tasks take a long time, there is no avoiding it. &lt;br&gt;Some factors are under your control and can be optimised, such as your data caching. Others are not, for example external services.&lt;/p&gt; &lt;p&gt;When considering what if any feedback to give to the users, you need to consider the following: &lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;What is the most time the user should go without any feedback?
    &lt;li&gt;What happens if the user is left without feedback for too long and tries to refresh the page?
    &lt;li&gt;Can the task be broken down into discrete steps?
    &lt;li&gt;Can the steps run in parallel or do they need to execute in a sequence?
    &lt;li&gt;Do all steps need to complete?&lt;/li&gt;
&lt;/ul&gt; &lt;p&gt;
    &lt;strong&gt;Short transactions&lt;/strong&gt;&lt;br&gt;A lot of web transactions are simple one step transactions. The user posts data to the web server, it performs a simple operation then redirects the user to another page which shows the result.&lt;br&gt;This pattern is described here:
    &lt;a href=&#34;http://en.wikipedia.org/wiki/Post/Redirect/Get&#34; target=&#34;_blank&#34;&gt;http://en.wikipedia.org/wiki/Post/Redirect/Get&lt;/a&gt;
&lt;/p&gt; &lt;p&gt;
    &lt;a href=&#34;http://www.codesIn.net/post/img/PostRedirectGet_DoubleSubmitSolution.png&#34; target=&#34;_blank&#34;&gt;
        &lt;img title=&#34;PostRedirectGet_DoubleSubmitSolution&#34; style=&#34;border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px&#34; border=&#34;0&#34; alt=&#34;PostRedirectGet_DoubleSubmitSolution&#34; src=&#34;http://www.codesIn.net/post/img/PostRedirectGet_DoubleSubmitSolution.png&#34; width=&#34;366&#34; height=&#34;300&#34;&gt;
    &lt;/a&gt;&lt;br&gt;
&lt;/p&gt; &lt;p&gt;If the task takes a short amount of time (e.g. 10 seconds), then a wait cursor or ‘Please wait’ message would be the simplest feedback you could do. &lt;br&gt;Note: duplicate transactions are possible if the user re-posts the page before processing completes. This scenario must therefore be handled with code on the server.&lt;/p&gt; 

&lt;p class=&#34;well&#34;&gt;
    &lt;strong&gt;Click to see a Demo:&lt;/strong&gt;
    &lt;a title=&#34;/mvc/Feedback/PostRedirectGet&#34; href=&#34;http://www.codesIn.net/mvc/Feedback/PostRedirectGet&#34; target=&#34;_blank&#34;&gt;/mvc/Feedback/PostRedirectGet&lt;/a&gt;
&lt;/p&gt; 

&lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;p&gt;
    &lt;strong&gt;Long transactions&lt;/strong&gt;
    &lt;br&gt;A long running task could be one that takes more than 10 seconds. The task could run in the background on the server and the user be redirected to a ‘holding’ page.
    &lt;br&gt;When the task is running the user would like to see feedback.&lt;br&gt;
    To give the user this feedback the client must either pull or server must push this information. This should happen every few seconds until the task completes.&lt;br&gt;
    This could be described as a Post / Redirect / Get / Redirect / Get pattern.
&lt;/p&gt; &lt;p&gt;
    &lt;a href=&#34;http://www.codesIn.net/post/img/PRGRG.png&#34; target=&#34;_blank&#34;&gt;
        &lt;img title=&#34;PRGRG&#34; style=&#34;border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px&#34; border=&#34;0&#34; alt=&#34;PRGRG&#34; src=&#34;http://www.codesIn.net/post/img/PRGRG.png&#34; width=&#34;333&#34; height=&#34;366&#34;&gt;
    &lt;/a&gt;
&lt;/p&gt; &lt;p&gt;A simple example of the client pulling the data would be to reload the page from the server every few seconds. When the background task was complete, there would be a redirect to the results page. &lt;/p&gt; 

&lt;p class=&#34;well&#34;&gt;
    &lt;strong&gt;Click to see a Demo:&lt;/strong&gt;
    &lt;a title=&#34;/mvc/Feedback/PostRedirectGetRedirectGet&#34; href=&#34;http://www.codesIn.net/mvc/Feedback/PostRedirectGetRedirectGet&#34; target=&#34;_blank&#34;&gt;/mvc/Feedback/PostRedirectGetRedirectGet&lt;/a&gt;
&lt;/p&gt; 

&lt;p&gt;Another solution would be to use JavaScript to make periodic Ajax requests to the server.
&lt;/p&gt; &lt;p&gt;
    A server push solution could use Signal R, which allows the server to push progress data to the client to display to the user.&lt;br&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Comet_(programming)&#34; target=&#34;_blank&#34;&gt;
        http://en.wikipedia.org/wiki/Comet_(programming)
    &lt;/a&gt;
&lt;/p&gt; 
&lt;p class=&#34;well&#34;&gt;
    &lt;strong&gt;Click to see a Demo:&lt;/strong&gt;
    &lt;a title=&#34;/mvc/Feedback/SignalR&#34; href=&#34;http://www.codesIn.net/mvc/Feedback/SignalR&#34; target=&#34;_blank&#34;&gt;
        /mvc/Feedback/SignalR
    &lt;/a&gt;
&lt;/p&gt;	
&lt;br&gt;
&lt;br&gt;
    &lt;strong&gt;
        Real World Example
    &lt;/strong&gt;
    &lt;br&gt;‘comparethemarket.com’ is a comparison site which provides car insurance quotes.
    &lt;br&gt;After you request a quote, a list is built on the page while you wait. After about 45 seconds the search is stopped and the results are shown.
&lt;p&gt;
    This all happens in a single browser page and could be classified as a mini single page application (SPA). It works using JavaScript as follows:
    &lt;br&gt;1. Block the page displaying ‘Searching…’
    &lt;br&gt;2. Post the request for quotes to the server.
    &lt;br&gt;3. Request new quotes from the server in JSON.
    &lt;br&gt;4. If the server provides quotes they are added to the page and the search feedback is updated.
    &lt;br&gt;5. If the response Indicates that the search has not finished then sleep for 5 seconds then go back to step 3.
    &lt;br&gt;6. Unblock the page.
&lt;/p&gt;
&lt;p&gt;
    &lt;a href=&#34;http://www.codesIn.net/post/img/CTm1.png&#34;&gt;
        &lt;strong&gt;1.&lt;/strong&gt;&amp;nbsp;&lt;img title=&#34;CTm1&#34; style=&#34;border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px; border-top-width: 0px&#34; border=&#34;0&#34; alt=&#34;CTm1&#34; src=&#34;http://www.codesIn.net/post/img/CTm1.png&#34; width=&#34;488&#34; height=&#34;201&#34;&gt;
&lt;/a&gt;
    &lt;br /&gt;&lt;br /&gt;
    &lt;a href=&#34;http://www.codesIn.net/post/img/CTm2.png&#34;&gt;
        &lt;strong&gt;2.&lt;/strong&gt;&amp;nbsp;&lt;img title=&#34;CTm2&#34; style=&#34;border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px; border-top-width: 0px&#34; border=&#34;0&#34; alt=&#34;CTm2&#34; src=&#34;http://www.codesIn.net/post/img/CTm2.png&#34; width=&#34;488&#34; height=&#34;264&#34;&gt;
&lt;/a&gt;
    &lt;br /&gt;&lt;br /&gt;
    &lt;a href=&#34;http://www.codesIn.net/post/img/CTm3.png&#34;&gt;
        &lt;strong&gt;3-5.&lt;/strong&gt;&amp;nbsp;&lt;img title=&#34;CTm3&#34; style=&#34;border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px; border-top-width: 0px&#34; border=&#34;0&#34; alt=&#34;CTm3&#34; src=&#34;http://www.codesIn.net/post/img/CTm3.png&#34; width=&#34;488&#34; height=&#34;268&#34;&gt;
&lt;/a&gt;
    &lt;br /&gt;&lt;br /&gt;
    &lt;a href=&#34;http://www.codesIn.net/post/img/CTm4.png&#34;&gt;
        &lt;strong&gt;6.&lt;/strong&gt;&amp;nbsp;&lt;img title=&#34;CTm4&#34; style=&#34;border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px&#34; border=&#34;0&#34; alt=&#34;CTm4&#34; src=&#34;http://www.codesIn.net/post/img/CTm4.png&#34; width=&#34;460&#34; height=&#34;488&#34;&gt;
&lt;/a&gt;
    &lt;br /&gt;&lt;br /&gt;
    &lt;a href=&#34;http://www.codesIn.net/post/img/Calls.png&#34;&gt;
        &lt;strong&gt;.&lt;/strong&gt;&amp;nbsp;&lt;img title=&#34;Calls&#34; style=&#34;border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px&#34; border=&#34;0&#34; alt=&#34;Calls&#34; src=&#34;http://www.codesIn.net/post/img/Calls.png&#34;&gt;
    &lt;/a&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Physical vs Online Scrum board</title>
      <link>http://www.codesin.net/post/The-Physical-vs-Online-Scrum-board/</link>
      <pubDate>Tue, 15 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://www.codesin.net/post/The-Physical-vs-Online-Scrum-board/</guid>
      <description>&lt;p&gt; &lt;p&gt;At the start of a Scrum sprint the team commits to some user stories which the team plans to complete by the end.
&lt;p&gt;Each user story is a piece of work which will deliver a feature or part of a feature.  &lt;p&gt;
    The stories move through a workflow on their way to completion. For example:  &lt;ol&gt;
        &lt;li&gt;Sprint Backlog
        &lt;li&gt;Elaboration
        &lt;li&gt;Development
        &lt;li&gt;Testing
        &lt;li&gt;Review
        &lt;li&gt;Done &lt;/li&gt;
    &lt;/ol&gt;
&lt;p&gt;
    Or it could be the more traditional:  &lt;ol&gt;
        &lt;li&gt;Sprint backlog
        &lt;li&gt;In Progress
        &lt;li&gt;Done &lt;/li&gt;
    &lt;/ol&gt;
&lt;p&gt;If you are not using any software to track the project then a whiteboard is helpful to display the cards and their states.
&lt;p&gt;
    If you are working on a large project, or the team is working over many sites then software such as Jira is can provide a virtual whiteboard. which helps to manage the stories.
&lt;p&gt;
    &lt;a href=&#34;https://www.atlassian.com/software/jira&#34;&gt;https://www.atlassian.com/software/jira&lt;/a&gt;
&lt;p&gt;
&lt;p&gt;
Once you have a virtual whiteboard the question is &#34;What benefit does a physical scrum board give&#34;?
&lt;p&gt;
    If you have both then you need to maintain your sprint status in two places. This seems like extra work, but is it so hard to write out the cards and put them on the board?
&lt;p&gt;
    If you decide not to have a real whiteboard then something tangible is missing. The act of picking up a card and moving it from one status to the next feels like an achievement. Having the sprint status visible gives the team extra focus and motivation to move the stories on.&amp;nbsp; And a sense of working toward a common goal as the sprint is progressing.
&lt;p&gt;&amp;nbsp;
&lt;p&gt;
    &lt;a href=&#34;http://www.codesIn.net/post/img/meta_35201_fairydustboard_20110324.jpg&#34;&gt;
        &lt;img title=&#34;meta_35201_fairydustboard_20110324&#34; style=&#34;border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px&#34; border=&#34;0&#34; alt=&#34;meta_35201_fairydustboard_20110324&#34; src=&#34;http://www.codesIn.net/post/img/meta_35201_fairydustboard_20110324.jpg&#34; width=&#34;323&#34; height=&#34;245&#34;&gt;
    &lt;/a&gt;
</description>
    </item>
    
    <item>
      <title>Scrum Retrospective &amp; Preparation</title>
      <link>http://www.codesin.net/post/Scrum/</link>
      <pubDate>Sun, 06 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://www.codesin.net/post/Scrum/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.codesIn.net/post/img/ScrumLargeLabelled.png&#34;&gt;&lt;img title=&#34;ScrumLargeLabelled&#34; style=&#34;border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; display: inline; border-top-width: 0px&#34; border=&#34;0&#34; alt=&#34;ScrumLargeLabelled&#34; src=&#34;http://www.codesIn.net/post/img/ScrumLargeLabelled.png&#34; width=&#34;644&#34; height=&#34;301&#34;&gt;&lt;/a&gt; &lt;/p&gt; &lt;p&gt;A retrospective is a meeting held at the end of a sprint which has the main aim of improving the performance of the team during future sprints. It is probably the most important event from the teams point of view.&amp;nbsp; &lt;/p&gt; &lt;p&gt;There are usually a number of questions the team is asked,&amp;nbsp; such as:&lt;/p&gt; &lt;p&gt;What should we: &lt;/p&gt;
&lt;ol&gt; &lt;li&gt;Start doing.  &lt;li&gt;Stop doing  &lt;li&gt;Continue doing &lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;http://www.mountaingoatsoftware.com/agile/scrum/sprint-retrospective/&#34;&gt;http://www.mountaingoatsoftware.com/agile/scrum/sprint-retrospective/&lt;/a&gt;&lt;/p&gt; &lt;p&gt;or &lt;/p&gt;
&lt;ol&gt;
    &lt;li&gt;What did we do well, that if we don’t discuss we might forget?
    &lt;li&gt;What did we learn?
    &lt;li&gt;What should we do differently next time?
    &lt;li&gt;What still puzzles us?&lt;/li&gt;
&lt;/ol&gt; &lt;p&gt;&lt;a href=&#34;http://www.benlinders.com/2013/which-questions-do-you-ask-in-retrospectives/&#34;&gt;http://www.benlinders.com/2013/which-questions-do-you-ask-in-retrospectives/&lt;/a&gt;&lt;/p&gt; &lt;p&gt;or&lt;/p&gt;
&lt;ol&gt; &lt;li&gt;What went well?  &lt;li&gt;What could be improved?&lt;/li&gt;&lt;/ol&gt; &lt;p&gt;
    &lt;br&gt;
    &lt;iframe height=&#34;315&#34; src=&#34;//www.youtube.com/embed/e7sMdEz5XvQ&#34; frameborder=&#34;0&#34; width=&#34;560&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/p&gt;
&lt;p&gt;At the start of the retrospective the team is given some time to think about the questions and create comments.  &lt;p&gt;
    If the team is in the same room for the retrospective they can write their comments on post-it notes and put them on a white board. If team is a blended on/offshore one then I don’t recommend sitting in a meeting room around a conference phone, either a virtual white board (e.g.
    &lt;a href=&#34;http://en.linoit.com&#34;&gt;en.linoit.com&lt;/a&gt;) or a wiki document can be used, with
    &lt;a href=&#34;http://en.wikipedia.org/wiki/Voice_over_IP&#34;&gt;VOIP&lt;/a&gt; (e.g. &lt;a href=&#34;http://www.skype.com/en/&#34;&gt;Skype&lt;/a&gt;) for each team member. The comments are then discussed, prioritised and if actions are possible are assigned to the team or scrum master to progress.
&lt;p&gt;&lt;iframe height=&#34;315&#34; src=&#34;//www.youtube.com/embed/L2zoKCbBvAw&#34; frameborder=&#34;0&#34; width=&#34;560&#34; allowfullscreen&gt;&lt;/iframe&gt; &lt;H3&gt;Pre-planning&lt;/H3&gt; &lt;p&gt;Population of the comments can be done prior to the meeting. Each team member is directed to either populate a shared document or send their points to the scrum master who can add them. Then during the retrospective the document acts as list of items to discuss:
&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;The time spent during the retrospective is reduced as there is no need for thinking time to create the items to discuss.
    &lt;li&gt;If working in a on/offshore blended team where a whiteboard can’t be used, then problems where everyone is trying to add their items to a shared document at the same time won’t occur.
    &lt;li&gt;It’s easier for the scrum master / project leads to pre-investigate any points which they are not aware of.
    &lt;li&gt;The items are pre-documented so less note taking is needed during the retrospective. &lt;/li&gt;
&lt;/ul&gt; &lt;p&gt;&lt;strong&gt;Disadvantages&lt;/strong&gt;&lt;/p&gt;&lt;strong&gt;&lt;/strong&gt;
&lt;ul&gt;
    &lt;li&gt;The activity is not seen as a priority over other work resulting in a lack of participation by some team members.
    &lt;li&gt;Once the retrospective has started team members feel they don’t need to add any more items. &lt;/li&gt;
&lt;/ul&gt; &lt;p&gt;Personally I prefer not to do pre-planning so that all team members get the time to think and contribute.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Virtual Reality is back</title>
      <link>http://www.codesin.net/post/Virtual-Reality-is-back/</link>
      <pubDate>Sun, 06 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://www.codesin.net/post/Virtual-Reality-is-back/</guid>
      <description>&lt;p&gt;Back in the early 90&#39;s virtual reality promised a lot and delivered little. This was the time of movie &#34;Lawnmower man&#34;, the 486 Intel pc, Doom was the must have PC game with blocky graphics as this&lt;br&gt;was years before the 3DFX Voodoo 3D cards were released. Game consoles were pretty poor (pre Sony PlayStation one) and game arcades were still the place to play top games, 3D games such as &#39;Hard Drivin&#39; or Daytona USA. Around this time I used to take the train down to London occasionally to visit the arcades there. It was fun to visit Soho(the Red light district) which amongst sex shops and review bars also had one or two cool arcades.&amp;nbsp; I can remember playing &#34;Dragon&#39;s Lair&#34; there, but this must of been in the late 80&#39;s.&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;http://www.codesIn.net/post/img/2-lawnmower-man.jpg&#34;&gt;&lt;img title=&#34;2-lawnmower-man&#34; style=&#34;border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px&#34; border=&#34;0&#34; alt=&#34;2-lawnmower-man&#34; src=&#34;http://www.codesIn.net/post/img/2-lawnmower-man.jpg&#34; width=&#34;244&#34; height=&#34;148&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;The Trocadero in Piccadilly Circus also contained a huge arcade and within it was the &#34;Virtuality&#34; centre, home to 3D game Heavy Metal (Exorex) which had stereoscopic 3D visuals. The head mounted display &lt;br&gt;consisted of a visor fitted with two displays of 276x372 resolution. I remember having to wait a while to get a go, it was expensive costing £5, the equivalent of £9.50 today. I only had one go which was utterly disappointing, it was one of the worst games I had ever played. The graphics were blocky and it was almost impossible to control due to the lag and poor processing power. The hardware was expensive and so was never going to be seen in your local arcade, let alone in your living room.&lt;/p&gt;
&lt;table cellspacing=&#34;0&#34; cellpadding=&#34;2&#34; width=&#34;600&#34; border=&#34;0&#34;&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td valign=&#34;top&#34;&gt;
                &lt;iframe height=&#34;315&#34; src=&#34;//www.youtube.com/embed/SP8wSw4bBuA&#34; frameborder=&#34;0&#34; width=&#34;420&#34; allowfullscreen&gt;&lt;/iframe&gt;
            &lt;/td&gt;
            &lt;td valign=&#34;top&#34;&gt;&amp;nbsp;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td valign=&#34;top&#34;&gt;&lt;iframe height=&#34;315&#34; src=&#34;//www.youtube.com/embed/j0SmB0i9Ato&#34; frameborder=&#34;0&#34; width=&#34;420&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/td&gt;
            &lt;td valign=&#34;top&#34;&gt;&amp;nbsp;&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt; &lt;p&gt;Roll forward 20 years and everything is about to change.&lt;/p&gt;
&lt;H3&gt;Immersive Technology&lt;/H3&gt; &lt;p&gt;There are two types of immersive technologies. &#34;virtual reality&#34; where you are fully immersed in a virtual world via a head mounted display and &#34;augmented reality&#34; where your normal reality is improved or altered.&lt;/p&gt;
&lt;h3&gt;VR Head mounted displays&lt;/h3&gt;
&lt;table cellspacing=&#34;0&#34; cellpadding=&#34;4&#34; width=&#34;600&#34; border=&#34;0&#34;&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td valign=&#34;top&#34;&gt; &lt;h4&gt;Oculus VR - Oculus Rift&lt;/h4&gt;Powered by your PC, Twin OLED 1920x1080 resolution display, head tracking via external camera, combination of 3-axis &lt;a href=&#34;http://en.wikipedia.org/wiki/Gyroscope&#34;&gt;gyros&lt;/a&gt;, &lt;a href=&#34;http://en.wikipedia.org/wiki/Accelerometer&#34;&gt;accelerometers&lt;/a&gt;, and &lt;a href=&#34;http://en.wikipedia.org/wiki/Magnetometer&#34;&gt;magnetometers&lt;/a&gt;&lt;br&gt;Cost: less than $500&lt;br&gt;* Update March 25 2014, Facebook buys Oculus VR for $2 Billion.&lt;br&gt;&lt;iframe height=&#34;315&#34; src=&#34;//www.youtube.com/embed/P50fvL_EWYY&#34; frameborder=&#34;0&#34; width=&#34;560&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/td&gt; &lt;td valign=&#34;top&#34;&gt;&amp;nbsp;&lt;/td&gt; &lt;td valign=&#34;top&#34;&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt; &lt;td valign=&#34;top&#34;&gt; &lt;h4&gt;Gameface Labs - Game face&lt;/h4&gt;Powered by a built in mobile phone, Single 1920x1080 display. &lt;br&gt;Cost: £350&lt;br&gt;&lt;iframe height=&#34;315&#34; src=&#34;//www.youtube.com/embed/LDTmz8mqkmI&#34; frameborder=&#34;0&#34; width=&#34;560&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/td&gt; &lt;td valign=&#34;top&#34;&gt;&amp;nbsp;&lt;/td&gt; &lt;td valign=&#34;top&#34;&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt; &lt;td valign=&#34;top&#34;&gt; &lt;h4&gt;Dive VR&lt;/h4&gt;Powered by your mobile phone &lt;br&gt;Cost: £50&lt;br&gt;&lt;iframe height=&#34;315&#34; src=&#34;//www.youtube.com/embed/vCMtKaKfl7Q&#34; frameborder=&#34;0&#34; width=&#34;560&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/td&gt; &lt;td valign=&#34;top&#34;&gt;&amp;nbsp;&lt;/td&gt; &lt;td valign=&#34;top&#34;&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt; &lt;td valign=&#34;top&#34;&gt; &lt;h4&gt;Sony – Project Morpheus&lt;/h4&gt;&lt;br&gt;Powered by your Playstation 4, LCD 2 x 1920x1080 resolution display&lt;br&gt;&lt;iframe height=&#34;315&#34; src=&#34;//www.youtube.com/embed/f7Q4Vf-HwEU&#34; frameborder=&#34;0&#34; width=&#34;560&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/td&gt; &lt;td valign=&#34;top&#34;&gt;&amp;nbsp;&lt;/td&gt; &lt;td valign=&#34;top&#34;&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt; &lt;td valign=&#34;top&#34;&gt; &lt;h4&gt;Sulon Cortex&lt;/h4&gt;&lt;br&gt;&lt;br&gt;Uses a mobile phone slid into the headset as the display. Does both VR and AR. &lt;iframe height=&#34;315&#34; src=&#34;//www.youtube.com/embed/nunypMANy1M&#34; frameborder=&#34;0&#34; width=&#34;560&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/td&gt; &lt;td valign=&#34;top&#34;&gt;&amp;nbsp;&lt;/td&gt; &lt;td valign=&#34;top&#34;&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt; &lt;p&gt;&amp;nbsp; &lt;p&gt;&lt;/p&gt; &lt;p&gt;&lt;/p&gt; &lt;p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/tbody&gt;&lt;/table&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;Augmented reality glasses&lt;/h3&gt; &lt;p&gt;
    &lt;table cellspacing=&#34;0&#34; cellpadding=&#34;2&#34; width=&#34;600&#34; border=&#34;0&#34;&gt;
        &lt;tbody&gt;
            &lt;tr&gt;
                &lt;td valign=&#34;top&#34;&gt;
                    &lt;h4&gt;Technical Illusions - Cast AR&lt;/h4&gt;
                    &lt;iframe height=&#34;315&#34; src=&#34;//www.youtube.com/embed/7mVw7__UZmU&#34; frameborder=&#34;0&#34; width=&#34;560&#34; allowfullscreen&gt;&lt;/iframe&gt;
                &lt;/td&gt;
                &lt;td valign=&#34;top&#34;&gt;&amp;nbsp;&lt;/td&gt;
                &lt;td valign=&#34;top&#34;&gt;&amp;nbsp;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td valign=&#34;top&#34;&gt;
                    &lt;h4&gt;
                        Google glasses&lt;br&gt;
                        &lt;iframe height=&#34;315&#34; src=&#34;//www.youtube.com/embed/j8lScHO2mM0&#34; frameborder=&#34;0&#34; width=&#34;560&#34; allowfullscreen&gt;&lt;/iframe&gt;
                    &lt;/h4&gt;
                &lt;/td&gt;
                &lt;td valign=&#34;top&#34;&gt;&amp;nbsp;&lt;/td&gt;
                &lt;td valign=&#34;top&#34;&gt;&amp;nbsp;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td valign=&#34;top&#34;&gt;
                    &lt;h4&gt;
                        Epson - Moverio BT-200&lt;br&gt;&lt;iframe height=&#34;315&#34; src=&#34;//www.youtube.com/embed/U59gMEXW0Yc&#34; frameborder=&#34;0&#34; width=&#34;560&#34; allowfullscreen&gt;&lt;/iframe&gt;
                    &lt;/h4&gt;
                &lt;/td&gt;
                &lt;td valign=&#34;top&#34;&gt;&amp;nbsp;&lt;/td&gt;
                &lt;td valign=&#34;top&#34;&gt;&amp;nbsp;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td valign=&#34;top&#34;&gt;
                    &lt;h4&gt;GlassUp&lt;br&gt;&lt;iframe height=&#34;315&#34; src=&#34;//www.youtube.com/embed/hapoXv5H1jg&#34; frameborder=&#34;0&#34; width=&#34;560&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/h4&gt;
                &lt;/td&gt;
                &lt;td valign=&#34;top&#34;&gt;&amp;nbsp;&lt;/td&gt;
                &lt;td valign=&#34;top&#34;&gt;&amp;nbsp;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td valign=&#34;top&#34;&gt;
                    &lt;h4&gt;
                        LaForge Optical’s “Smartspecks”&lt;br&gt;&lt;iframe height=&#34;315&#34; src=&#34;//www.youtube.com/embed/cuz_IswuxNM&#34; frameborder=&#34;0&#34; width=&#34;560&#34; allowfullscreen&gt;&lt;/iframe&gt;
                    &lt;/h4&gt;
                &lt;/td&gt;
                &lt;td valign=&#34;top&#34;&gt;&amp;nbsp;&lt;/td&gt;
                &lt;td valign=&#34;top&#34;&gt;&amp;nbsp;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td valign=&#34;top&#34;&gt;
                    &lt;h4&gt;
                        Atheer labs&lt;br&gt;&lt;iframe height=&#34;315&#34; src=&#34;//www.youtube.com/embed/T0onzbGNJIQ&#34; frameborder=&#34;0&#34; width=&#34;560&#34; allowfullscreen&gt;&lt;/iframe&gt;
                    &lt;/h4&gt;
                &lt;/td&gt;
                &lt;td valign=&#34;top&#34;&gt;&amp;nbsp;&lt;/td&gt;
                &lt;td valign=&#34;top&#34;&gt;&amp;nbsp;&lt;/td&gt;
            &lt;/tr&gt;
        &lt;/tbody&gt;
    &lt;/table&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CSS Transformations</title>
      <link>http://www.codesin.net/post/Css-Transformations/</link>
      <pubDate>Sun, 02 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://www.codesin.net/post/Css-Transformations/</guid>
      <description>&lt;p&gt;
    &lt;a href=&#34;http://www.codesIn.net/post/img/CssJs.png&#34;&gt;
        &lt;img title=&#34;CssJs&#34; style=&#34;border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px&#34; border=&#34;0&#34; alt=&#34;CssJs&#34; src=&#34;http://www.codesIn.net/post/img/CssJs.png&#34; width=&#34;244&#34; height=&#34;167&#34;&gt;
    &lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
    Animation is possible by simply using CSS. Animate.css is an example which allows the animation of html elements by simply adding a style to the element. This could be used to add feedback when an event occurs in the UI.
    &lt;br&gt;&lt;a href=&#34;http://daneden.github.io/animate.css/&#34; target=&#34;_blank&#34;&gt;http://daneden.github.io/animate.css/&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;e.g. When a button is pressed you could provide visual feedback that the click has been registered.&lt;/p&gt;
&lt;iframe height=&#34;200&#34; src=&#34;http://www.codesIn.net/post/content/animatecss/AnimateCss.html&#34; width=&#34;200&#34;&gt;&lt;/iframe&gt;
&lt;H3&gt;Examples&lt;/H3&gt;
&lt;p&gt;
    Other examples of CSS animation can be seen on the web, one example doing css animation uses the
    &lt;a href=&#34;http://www.zachstronaut.com/projects/rotate3di/&#34; target=&#34;_blank&#34;&gt;rotate3di js&lt;/a&gt; library. see
    &lt;a href=&#34;http://premiumcoding.com/jquery/falling-leaves/Leaf2Example/&#34; target=&#34;_blank&#34;&gt;http://premiumcoding.com/jquery/falling-leaves/Leaf2Example/&lt;/a&gt;
&lt;/p&gt;&lt;iframe height=&#34;800&#34; src=&#34;http://premiumcoding.com/jquery/falling-leaves/Leaf2Example/&#34; width=&#34;600&#34;&gt;&lt;/iframe&gt;
&lt;H3&gt;My Demo&lt;/H3&gt; &lt;p&gt;
    I have used
    &lt;a href=&#34;http://ricostacruz.com/jquery.transit/&#34; target=&#34;_blank&#34;&gt;jquery.transit&lt;/a&gt;
    to write my own version of the falling leaves demo using both frame &amp; CSS animation with the following enhancements:
&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;The leaves are Images rather than graphics.
    &lt;li&gt;Jquery.transit is used to scale and rotate the leaves in their x &amp; y axis&lt;/li&gt;
    &lt;li&gt;A random wind force affects the speed the leaves spin &amp; scale on their x &amp; y axis and how fast they move position.
&lt;/ul&gt;  &lt;p&gt;The demo animates fifty leaves made up of 6 different leaf designs:&lt;/p&gt;
&lt;img src=&#34;http://www.codesIn.net/post/content/animatecss/img/leaf1.gif&#34; style=&#34;width: 100px&#34; /&gt;
&lt;img src=&#34;http://www.codesIn.net/post/content/animatecss/img/leaf2.gif&#34; style=&#34;width: 100px&#34; /&gt;
&lt;img src=&#34;http://www.codesIn.net/post/content/animatecss/img/leaf3.gif&#34; style=&#34;width: 100px&#34; /&gt;
&lt;img src=&#34;http://www.codesIn.net/post/content/animatecss/img/leaf4.gif&#34; style=&#34;width: 100px&#34; /&gt;
&lt;img src=&#34;http://www.codesIn.net/post/content/animatecss/img/leaf5.gif&#34; style=&#34;width: 100px&#34; /&gt;
&lt;img src=&#34;http://www.codesIn.net/post/content/animatecss/img/leaf6.gif&#34; style=&#34;width: 100px&#34; /&gt;
&lt;p&gt;
    &lt;a href=&#34;http://www.codesIn.net/post/content/animatecss/cssanimationdemo.html&#34;&gt;&lt;strong&gt;View Demo page&lt;/strong&gt;&lt;/a&gt;
&lt;/p&gt; &lt;p&gt;
    You can download the source code
    &lt;a href=&#34;http://www.codesIn.net/post/content/animatecss/CssAnimation.zip&#34; target=&#34;_blank&#34;&gt;here...&lt;/a&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mapping Images on Spherical Surfaces Using Javascript and HTML5 Canvas</title>
      <link>http://www.codesin.net/post/Mapping-Images-on-Spherical-Surfaces-Using-Javascript-and-HTML5-Canvas/</link>
      <pubDate>Sat, 01 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://www.codesin.net/post/Mapping-Images-on-Spherical-Surfaces-Using-Javascript-and-HTML5-Canvas/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.codesIn.net/post/img/Earth.png&#34;&gt;&lt;img title=&#34;Earth&#34; style=&#34;border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px&#34; border=&#34;0&#34; alt=&#34;Earth&#34; src=&#34;http://www.codesIn.net/post/img/Earth.png&#34; width=&#34;155&#34; height=&#34;154&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a title=&#34;andalmeida&#34; href=&#34;http://www.codeproject.com/Members/andalmeida&#34;&gt;andalmeida&lt;/a&gt; posted on codeproject.com showing how to map images onto spherical surfaces using C#. I have taken his code and converted it to work with javascript and an HTML5 Canvas.&lt;/p&gt; &lt;p&gt;Original article: &lt;a href=&#34;http://www.codeproject.com/Articles/19712/Mapping-Images-on-Spherical-Surfaces-Using-C&#34;&gt;http://www.codeproject.com/Articles/19712/Mapping-Images-on-Spherical-Surfaces-Using-C&lt;/a&gt;&lt;/p&gt;
&lt;H3&gt;Demo:&lt;/H3&gt;&lt;iframe height=&#34;260&#34; src=&#34;http://www.codesIn.net/post/content/ImageWrapDemo/wrapspheredemo.html&#34; width=&#34;600&#34;&gt;&lt;/iframe&gt;&lt;br&gt;
&lt;H3&gt;Source Code&lt;/H3&gt;&lt;a href=&#34;http://www.codesIn.net/post/content/ImageWrapDemo/ImageWrapDemo.zip&#34;&gt;Download source code&lt;/a&gt;&amp;nbsp;&amp;nbsp; Note: You must run it in a web project to avoid cross domain issues which will prevent the reading of image data.  &lt;H3&gt;Html:&lt;/H3&gt;Contains a canvas &#39;myCanvas&#39; which will be drawn to. &lt;pre class=&#34;prettyprint&#34;&gt;&amp;lt;img src=&#34;images/worldmap.gif&#34; id=&#34;myImage&#34; /&amp;gt;
&amp;lt;canvas id=&#34;myCanvas&#34; width=&#34;150&#34; height=&#34;150&#34; style=&#34;background-color: #000000&#34;&amp;gt;&amp;lt;/canvas&amp;gt;
&amp;lt;br /&amp;gt;
&amp;lt;input type=&#34;range&#34; id=&#34;rangeInput&#34; min=&#34;-31&#34; max=&#34;31&#34;&amp;gt;&amp;amp; Drag to Rotate
&amp;lt;script src=&#34;./js/WrapSphereDemo.js&#34;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;
&lt;H3&gt;Javascript:&lt;/H3&gt;Loads the image to wrap, then calls a library to wrap it around a sphere, then writes the result onto the canvas. &lt;pre class=&#34;prettyprint&#34;&gt;var WrapSphereDemo;
(function (WrapSphereDemo) {
    var image;
    var context;
    var myImg = new Image();
    window.onload = function () {
        // hook up range change and image onload to render
        document.getElementById(&#34;rangeInput&#34;).onchange = Render;
        myImg.onload = Render;
		
	// load image
        myImg.src = &#34;./images/worldmap.gif&#34;;
    };
    function Render() {
        GenerateImage(myImg);
    }
    function GenerateImage(myImg) {
        var canvasToDrawOn = document.getElementById(&#34;myCanvas&#34;);
        var canvasToDrawOnContext = canvasToDrawOn.getContext(&#34;2d&#34;);
        // Copy the image into a canvas
        var offscreenCanvas = document.createElement(&#34;canvas&#34;);
        offscreenCanvas.width = myImg.width;
        offscreenCanvas.height = myImg.height;
        var offscreenContext = offscreenCanvas.getContext(&#34;2d&#34;);
        offscreenContext.drawImage(myImg, 0, 0);
		
	// get the image data from the hidden canvas
        var fromImage = offscreenContext.getImageData(0, 0, myImg.width, myImg.height);
        // Create a new image with the source image wrapped around a sphere
        var yRotate = (parseInt(document.getElementById(&#34;rangeInput&#34;).value) - 31) / 10;
        var xRotate = Math.PI / 2;
        var toImage = canvasToDrawOnContext.getImageData(0, 0, 50 * 2, 50 * 2);
        var image = SphereImageLib.WrapSphere(fromImage, toImage, xRotate, yRotate, 50);
		
	// copy the image to the canvas
        canvasToDrawOnContext.putImageData(image, 25, 25);
    }
})(WrapSphereDemo || (WrapSphereDemo = {}));
&lt;/pre&gt;&lt;br&gt;
&lt;H3&gt;Javascript Lib:&lt;/H3&gt;Javascript which maps each pixel in the image onto a sphere, then copies the pixel onto the destination image. Refactored from: &lt;a href=&#34;http://www.codeproject.com/Articles/19712/Mapping-Images-on-Spherical-Surfaces-Using-C&#34;&gt;http://www.codeproject.com/Articles/19712/Mapping-Images-on-Spherical-Surfaces-Using-C&lt;/a&gt; &lt;pre class=&#34;prettyprint&#34;&gt;var SphereImageLib;
(function (SphereImageLib) {
    function WrapSphere(fromImage, toImage, xRotate, yRotate, radius) {
        var coordinates = new SphereMapper(fromImage.width, fromImage.height, xRotate, yRotate, radius);
        for (var i = 0; i &amp;lt; toImage.data.length; i++) {
            toImage.data[i] = 0;
        }
        for (var i = 0; i &amp;lt; fromImage.width; i++) {
            for (var j = 0; j &amp;lt; fromImage.height; j++) {
                coordinates.Map(i, j);
                if (coordinates.z &amp;gt; 0) {
                    var fromPixel = new Pixel(fromImage, i, j);
                    var toPixel = new Pixel(toImage, coordinates.x + coordinates.radius, coordinates.y + coordinates.radius);
                    toPixel.Copy(fromPixel);
                }
            }
        }
        return toImage;
    }
    SphereImageLib.WrapSphere = WrapSphere;
    var RotateResult = (function () {
        function RotateResult() {
        }
        return RotateResult;
    })();
    SphereImageLib.RotateResult = RotateResult;
    var SphereMapper = (function () {
        function SphereMapper(width, height, xRotate, yRotate, radius) {
            this.theta0 = 0.0;
            this.theta1 = 2.0 * Math.PI;
            this.phi0 = 0.0;
            this.phi1 = Math.PI;
            this.width = width;
            this.height = height;
            this.xRotate = xRotate;
            this.yRotate = yRotate;
            this.radius = radius;
        }
        //// map a pixel to a position on the sphere
        SphereMapper.prototype.Map = function (i, j) {
            var theta = this.MapCoordinate(0.0, this.width - 1, this.theta1, this.theta0, i);
            var phi = this.MapCoordinate(0.0, this.height - 1, this.phi0, this.phi1, j);
            this.x = this.radius * Math.sin(phi) * Math.cos(theta);
            this.y = this.radius * Math.sin(phi) * Math.sin(theta);
            this.z = this.radius * Math.cos(phi);
            var result;
            result = this.Rotate(this.xRotate, this.y, this.z);
            this.y = result.r1;
            this.z = result.r2;
            result = this.Rotate(this.yRotate, this.x, this.z);
            this.x = result.r1;
            this.z = result.r2;
        };
        SphereMapper.prototype.MapCoordinate = function (i1, i2, w1, w2, p) {
            return ((p - i1) / (i2 - i1)) * (w2 - w1) + w1;
        };
        SphereMapper.prototype.Rotate = function (angle, axisA, axisB) {
            return {
                r1: axisA * Math.cos(angle) - axisB * Math.sin(angle),
                r2: axisA * Math.sin(angle) + axisB * Math.cos(angle)
            };
        };
        return SphereMapper;
    })();
    SphereImageLib.SphereMapper = SphereMapper;
    var Pixel = (function () {
        function Pixel(image, x, y) {
            this.image = image;
            this.index = (Math.floor(x) + Math.floor(y) * this.image.width) * 4;
        }
        Pixel.prototype.Copy = function (from) {
            for (var i = 0; i &amp;lt; 3; i++) {
                this.image.data[this.index + i] = from.image.data[from.index + i];
            }
            this.image.data[this.index + 3] = 255; // Alpha not opaque
        };
        return Pixel;
    })();
    SphereImageLib.Pixel = Pixel;
})(SphereImageLib || (SphereImageLib = {}));
&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Testing JavaScript with Visual Studio</title>
      <link>http://www.codesin.net/post/Testing-JavaScript-with-Visual-Studio/</link>
      <pubDate>Sat, 01 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://www.codesin.net/post/Testing-JavaScript-with-Visual-Studio/</guid>
      <description>&lt;p&gt;If your web application is using JavaScript for non trivial functionality then it makes sense to test it programmatically. Various JavaScript frameworks have been written to allow you to write JavaScript tests to test your JavaScript.  &lt;p&gt;This pluralsight course gives a good overview: pluralsight - Testing Clientside JavaScript  &lt;H3&gt;The main decisions you will need to make&lt;/H3&gt;
&lt;p&gt;1. What style do you want to write your tests in ?
&lt;p&gt;Behaviour Driven Development (BDD) or Test Driven Development (TDD), as this will influence which JavaScript test framework you use.  &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;div id=&#34;scid:5737277B-5D6D-4f48-ABFC-DD9C333F4C5D:0fd715c7-5c87-48d7-ac28-8f324820e0d2&#34; class=&#34;wlWriterSmartContent&#34; style=&#34;float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px&#34;&gt;
    &lt;div&gt;
        &lt;embed type=&#34;application/x-shockwave-flash&#34; height=&#34;355&#34; width=&#34;425&#34; src=&#34;http://www.youtube.com/v/mT8QDNNhExg&amp;amp;hl=en&#34;&gt;
    &lt;/div&gt;
&lt;/div&gt; &lt;p&gt;2. The JavaScript Test framework you are going to use, the most popular are:&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;QUnit(TDD) &lt;a href=&#34;http://qunitjs.com&#34;&gt;qunitjs.com&lt;/a&gt;
    &lt;li&gt;Jasmine(BDD) &lt;a href=&#34;http://pivotal.github.io/jasmine&#34;&gt;pivotal.github.io/jasmine&lt;/a&gt;
    &lt;li&gt;
        Mocha (TDD or BDD).
        &lt;a href=&#34;http://visionmedia.github.io/mocha &#34;&gt;visionmedia.github.io/mocha&lt;/a&gt;
    &lt;/li&gt;
&lt;/ul&gt; &lt;p&gt;3. Which test runner or runners you want to use. The options are:
&lt;p&gt;Outside of Visual Studio:&lt;/p&gt;
&lt;ul&gt; &lt;li&gt;Browser  &lt;li&gt;Grunt &lt;/li&gt;&lt;/ul&gt; &lt;p&gt;Within Visual Studio&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;Visual Studio Extension: Chutzpah&amp;nbsp;
    &lt;li&gt;Visual Studio Extension: KarmaVs. (Also requires Node.js)
    &lt;li&gt;ReSharper 6&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My choice is to use a combination of Chutzpah and Browser.  &lt;H3&gt;Browser Test Runner &lt;/H3&gt;
&lt;p&gt;This is the simplest choice, and can be debugged in visual studio, but requires an HTML file for each test / suite of tests.  &lt;p&gt;
    &lt;a href=&#34;http://www.codesIn.net/post/img/BrowserJavascriptTesting.png&#34;&gt;
        &lt;img title=&#34;BrowserJavascriptTesting[4]&#34; style=&#34;display: inline&#34; border=&#34;0&#34; alt=&#34;BrowserJavascriptTesting[4]&#34; src=&#34;http://www.codesIn.net/post/img/BrowserJavascriptTesting.png&#34;&gt;
    &lt;/a&gt;
&lt;/p&gt;
&lt;H3&gt;Visual Studio Extension - Chutzpah &lt;/H3&gt; &lt;
 p&gt;
 Chutzpah is a visual studio extension which contains 3 of the most popular testing frameworks (Mocha, Quit, Jasmine). It runs and displays your tests in the test explorer.
&lt;p&gt;The major drawback is that you can&#39;t debug tests.  &lt;p&gt;&lt;a href=&#34;http://chutzpah.codeplex.com/&#34;&gt;http://chutzpah.codeplex.com/&lt;/a&gt;
&lt;p&gt;
    In Visual studio 2012/2013: Tools-&amp;gt;Extensions and Updates -&amp;gt; Online -&amp;gt; Search for &#39;Chutzpah&#39;. Install:&lt;br&gt;•Chutzpah Test Runner Context Menu Extension
    &lt;br&gt;
    •Chutzpah Test Adaptor for the Test Explorer
&lt;p&gt;
    &lt;a href=&#34;http://www.codesIn.net/post/img/VisualStudioJavaScript.png&#34;&gt;
        &lt;img title=&#34;VisualStudioJavaScript[3]&#34; style=&#34;display: inline&#34; border=&#34;0&#34; alt=&#34;VisualStudioJavaScript[3]&#34; src=&#34;http://www.codesIn.net/post/img/VisualStudioJavaScript.png&#34;&gt;
    &lt;/a&gt;
    &lt;h3&gt;
        Configuration
    &lt;/h3&gt;
&lt;p&gt;Optionally add a Chutzpah.json file, amend to indicate your chosen framework.
&lt;p&gt;Chutzpah.json Settings File
&lt;p&gt;{&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &#34;Framework&#34;: &#34;qunit&#34;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &#34;TestHarnessLocationMode&#34;: &#34;TestFileAdjacent&#34;,&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &#34;TypeScriptCodeGenTarget&#34; : &#34;ES5&#34;,  &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &#34;RootReferencePathMode&#34;:&#34;SettingsFileDirectory&#34;
&lt;p&gt;} &lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>HTML5 Canvas Animation</title>
      <link>http://www.codesin.net/post/HTML5-Canvas-Animation/</link>
      <pubDate>Sun, 16 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>http://www.codesin.net/post/HTML5-Canvas-Animation/</guid>
      <description>&lt;a href=&#34;http://www.codesIn.net/post/img/js-logo-badge-512-200x200.png&#34;&gt;&lt;img title=&#34;js-logo-badge-512-200x200&#34; style=&#34;border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px&#34; border=&#34;0&#34; alt=&#34;js-logo-badge-512-200x200&#34; src=&#34;http://www.codesIn.net/post/img/js-logo-badge-512-200x200.png&#34; width=&#34;204&#34; height=&#34;204&#34;&gt;&lt;/a&gt;&lt;script src=&#34;https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js&#34;&gt;&lt;/script&gt;  &lt;p&gt;Animating a 2D canvas involves redrawing the canvas via a callback. The basic pattern looks like this:&lt;/p&gt;&lt;pre class=&#34;prettyprint&#34;&gt;&lt;p&gt;var requestAnimFrame = (function () {&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; window.setTimeout(callback, 1000 / 60, new Date().getTime());&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; };&lt;br&gt;})();&lt;/p&gt;
&lt;p&gt;function animate() {&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; draw();&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; requestAnimationFrame(animate);&lt;br&gt;}&lt;/p&gt;
&lt;p&gt;function draw() {&lt;/p&gt;
&lt;p&gt;// redraw the next frame here&lt;br&gt;}&lt;/p&gt;
&lt;p&gt;window.onload = function (e) {&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; animate();&lt;br&gt;}&lt;/p&gt;
&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;This demo draws a rectangle and moves it each time it is redrawn:&lt;/p&gt;&lt;canvas id=&#34;myCanvas&#34; height=&#34;80&#34; width=&#34;578&#34;&gt;Canvas &lt;/canvas&gt;&lt;pre class=&#34;prettyprint&#34;&gt;&lt;p&gt;var canvas = &amp;lt;HTMLCanvasElement&amp;gt;document.getElementById(&#39;myCanvas&#39;);&lt;br&gt;var context = canvas.getContext(&#39;2d&#39;);&lt;br&gt;var x = 50;&lt;br&gt;var y = 20;&lt;br&gt;var vx = 1;&lt;/p&gt;
&lt;p&gt;function draw() {&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; x = x + vx;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (x &amp;gt; 100 || x &amp;lt; 1) {&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; vx = -vx;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; context.beginPath();&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; context.rect(x, y, 40, 20);&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; context.fillStyle = &#39;#8ED6FF&#39;;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; context.fill();&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; context.lineWidth = 1;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; context.strokeStyle = &#39;black&#39;;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; context.stroke();&lt;br&gt;}&lt;/p&gt;
&lt;/pre&gt;&lt;script&gt;
var requestAnimFrame = (function () {
    return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {
        window.setTimeout(callback, 1000 / 60, new Date().getTime());
    };
})();

function animate() {
    draw();
    requestAnimationFrame(animate);
}

var canvas = document.getElementById(&#39;myCanvas&#39;);
var context = canvas.getContext(&#39;2d&#39;);
var x = 50;
var y = 20;
var vx = 1;

function draw() {
    x = x + vx;
    if (x &gt; 100 || x &lt; 1) {
        vx = -vx;
    }

    context.beginPath();
    context.rect(x, y, 40, 20);
    context.fillStyle = &#39;#8ED6FF&#39;;
    context.fill();
    context.lineWidth = 1;
    context.strokeStyle = &#39;black&#39;;
    context.stroke();
}

window.onload = function (e) {
    animate();
};

&lt;/script&gt;
</description>
    </item>
    
  </channel>
</rss>